// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum ExpenditureStatus {
    WAITING
    PAID
}

enum InflowStatus {
    WAITING
    RECEIVED
}

model FixedExpenses {
    id          Int      @id @default(autoincrement())
    description String
    value       Float
    category    String
    paymentDate Int
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    user      User     @relation(fields: [userId], references: [id])
    userId    String
    Account   Account? @relation(fields: [accountId], references: [id])
    accountId Int?
}

model FixedInflows {
    id          Int      @id @default(autoincrement())
    description String
    value       Float
    category    String
    paymentDate Int
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    user      User     @relation(fields: [userId], references: [id])
    userId    String
    Account   Account? @relation(fields: [accountId], references: [id])
    accountId Int?
}

model Expenditure {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    description String
    value       Float
    paymentDate DateTime
    status      ExpenditureStatus @default(WAITING)
    category    String
    fixed       Boolean?
    fixedId     Int?

    user User @relation(fields: [userId], references: [id])

    userId    String
    Account   Account? @relation(fields: [accountId], references: [id])
    accountId Int?

    card   Card? @relation(fields: [cardId], references: [id])
    cardId Int?
}

model Inflow {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    description String
    value       Float
    paymentDate DateTime
    status      InflowStatus @default(WAITING)
    category    String
    fixed       Boolean?

    user      User     @relation(fields: [userId], references: [id])
    userId    String
    Account   Account? @relation(fields: [accountId], references: [id])
    accountId Int?
}

model Card {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name    String
    limit   Float
    balance Float?
    main    Boolean?

    user        User          @relation(fields: [userId], references: [id])
    userId      String
    Account     Account?      @relation(fields: [accountId], references: [id])
    accountId   Int?
    Expenditure Expenditure[]
}

// Necessary for Next auth
model Account {
    id                Int             @id @default(autoincrement())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
    FixedExpenses     FixedExpenses[]
    FixedInflows      FixedInflows[]
    Expenditure       Expenditure[]
    Inflow            Inflow[]
    Card              Card[]

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String          @id @default(cuid())
    name          String?
    email         String?         @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    FixedExpenses FixedExpenses[]
    FixedInflows  FixedInflows[]
    Expenditure   Expenditure[]
    Inflow        Inflow[]
    Card          Card[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
