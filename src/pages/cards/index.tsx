import { Button, Card, Skeleton, useDisclosure } from "@nextui-org/react";
import { type GetServerSideProps } from "next";
import Head from "next/head";
import { Fragment } from "react";
import { AddCard } from "~/components/AddCard";
import { type Bank, CreditCard } from "~/components/CreditCard";
import { getServerAuthSession } from "~/server/auth";
import { api } from "~/utils/api";

export default function Cards() {
  const { isOpen, onOpenChange, onClose, onOpen } = useDisclosure();

  const { data, isLoading } = api.card.getAll.useQuery();

  return (
    <Fragment>
      <Head>
        <title>My Finances | Cards</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="flex flex-col items-center">
        <div className="flex w-full max-w-[1280px] flex-col gap-4 px-6 py-8">
          <div className="flex items-center justify-between">
            <h1>Cart√µes</h1>

            <Button onClick={onOpen} color="success">
              Adicionar novo
            </Button>
          </div>
          <div className="grid w-full grid-cols-1 gap-8 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4">
            {isLoading && (
              <Card className="w-[280px] space-y-8 p-8" radius="lg">
                <Skeleton className="rounded-lg">
                  <div className="h-10 rounded-lg bg-default-300"></div>
                </Skeleton>
                <div className="space-y-3">
                  <Skeleton className="w-5/5 rounded-lg">
                    <div className="h-3 w-4/5 rounded-lg bg-default-200"></div>
                  </Skeleton>
                </div>
              </Card>
            )}

            {data?.map((card) => (
              <CreditCard
                key={card.id}
                bank={card.name as Bank}
                limit={card.limit}
              />
            ))}
          </div>
        </div>
      </main>

      <AddCard isOpen={isOpen} onOpenChange={onOpenChange} onClose={onClose} />
    </Fragment>
  );
}

export const getServerSideProps: GetServerSideProps = async (ctx) => {
  const session = await getServerAuthSession(ctx);

  if (!session?.user) {
    return {
      redirect: {
        destination: "/",
        permanent: false,
      },
    };
  }

  return {
    props: { session },
  };
};
