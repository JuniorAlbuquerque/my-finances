import {
  Button,
  type ButtonProps,
  Card,
  CardBody,
  CardHeader,
  Table,
  TableBody,
  TableCell,
  TableColumn,
  TableHeader,
  TableRow,
  getKeyValue,
  Skeleton,
} from "@nextui-org/react";
import { type GetServerSideProps } from "next";
import Head from "next/head";
import { Fragment } from "react";
import { type Bank, CreditCard } from "~/components/CreditCard";
import { getServerAuthSession } from "~/server/auth";
import { RxDotFilled, RxPlusCircled } from "react-icons/rx";
import clsx from "clsx";
import { api } from "~/utils/api";
import { formatCurrency } from "~/utils/formatCurrency";

const tableRows = [
  {
    key: "1",
    date: "Today",
    description: "Uber",
    category: "Transport",
    value: 20,
  },
  {
    key: "2",
    date: "Today",
    description: "Food chicken, eggs",
    category: "Food",
    value: 64.5,
  },
];

const tableColumns = [
  {
    key: "date",
    label: "Date",
  },
  {
    key: "description",
    label: "Description",
  },
  {
    key: "category",
    label: "Category",
  },
  {
    key: "value",
    label: "Value",
  },
];

export default function Dashboard() {
  // const { data: sessionData } = useSession();

  const { data: cards, isLoading } = api.card.getAll.useQuery();
  const { data: mainCard, isLoading: isLoadingMain } =
    api.card.getMain.useQuery();

  return (
    <Fragment>
      <Head>
        <title>My Finances | Home</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="flex flex-col items-center">
        <div className="flex w-full max-w-[1280px] flex-col gap-8 px-6 py-8">
          <Card shadow="sm" className="p-4">
            <CardHeader className="flex-col items-start">
              <p className="text-tiny font-bold uppercase text-default-500">
                Main account
              </p>
            </CardHeader>
            <CardBody className="overflow-visible p-3">
              <div className="flex flex-wrap justify-between gap-4">
                <div className="flex flex-col gap-2">
                  {isLoadingMain ? (
                    <Fragment>
                      <Skeleton className="max-w-[140px] rounded-lg">
                        <div className="h-8 max-w-[40px] rounded-lg bg-default-300"></div>
                      </Skeleton>
                      <Skeleton className="rounded-lg">
                        <div className="h-6 w-[240px] rounded-lg bg-default-300"></div>
                      </Skeleton>
                    </Fragment>
                  ) : (
                    <Fragment>
                      <h4 className="text-2xl font-bold">{mainCard?.name}</h4>
                      <p className="text-base font-medium uppercase tracking-wider text-default-500">
                        88 1002 2123 223 32333
                      </p>
                    </Fragment>
                  )}
                </div>

                {isLoadingMain ? (
                  <div className="flex items-baseline gap-2">
                    <Skeleton className="rounded-lg">
                      <div className="h-12 w-[140px] rounded-lg bg-default-300"></div>
                    </Skeleton>
                  </div>
                ) : (
                  <div className="flex items-baseline gap-2">
                    <h1 className="text-4xl font-semibold">
                      {formatCurrency(mainCard?.balance!)}
                    </h1>
                    <p>R$</p>
                  </div>
                )}
              </div>

              <div className="flex gap-4 pt-6">
                <Button
                  className="w-fit text-sm font-medium text-white"
                  size="lg"
                  color="success"
                >
                  Transfer money
                </Button>
                <Button
                  className="w-fit text-sm font-medium"
                  size="lg"
                  variant="flat"
                >
                  Withdraw
                </Button>
              </div>
            </CardBody>
          </Card>

          <div className="grid w-full grid-cols-1 gap-8 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4">
            {isLoading ? (
              <Card className="w-[280px] space-y-8 p-8" radius="lg">
                <Skeleton className="rounded-lg">
                  <div className="h-10 rounded-lg bg-default-300"></div>
                </Skeleton>
                <div className="space-y-3">
                  <Skeleton className="w-5/5 rounded-lg">
                    <div className="h-3 w-4/5 rounded-lg bg-default-200"></div>
                  </Skeleton>
                </div>
              </Card>
            ) : (
              cards?.map((card) => (
                <CreditCard
                  key={card.id}
                  bank={card.name as Bank}
                  limit={card.limit}
                />
              ))
            )}

            <div
              className={clsx(
                "flex cursor-pointer flex-col items-center justify-center rounded-lg p-8 text-zinc-500 transition-all hover:scale-105",
                "w-full border-1 border-dashed border-zinc-300 bg-zinc-100/10 dark:border-zinc-700 dark:bg-zinc-800/20"
              )}
            >
              <RxPlusCircled size={30} />
            </div>
          </div>

          <Card shadow="sm" className="p-4">
            <CardHeader>
              <h4 className="text-lg font-semibold">Latest transactions</h4>
            </CardHeader>

            <CardBody className="p-[0.1rem]">
              <Table
                removeWrapper
                hideHeader
                isStriped
                aria-label="Example static collection table"
              >
                <TableHeader columns={tableColumns}>
                  {(column) => (
                    <TableColumn key={column.key}>{column.label}</TableColumn>
                  )}
                </TableHeader>
                <TableBody items={tableRows}>
                  {(item) => (
                    <TableRow key={item.key}>
                      {(columnKey) => {
                        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
                        const value = getKeyValue(item, columnKey);

                        const color = {
                          Transport: "secondary",
                          Food: "warning",
                          Salary: "success",
                          Payment: "danger",
                        };

                        return (
                          <TableCell>
                            <div className="flex items-center gap-2">
                              {columnKey === "category" && (
                                <Button
                                  isIconOnly
                                  size="sm"
                                  color={
                                    color[
                                      value as unknown as keyof typeof color
                                    ] as ButtonProps["color"]
                                  }
                                  variant="flat"
                                  className="h-8 w-4"
                                  disabled
                                >
                                  <RxDotFilled size={24} />
                                </Button>
                              )}

                              <span
                                className={clsx({
                                  "text-success": value === "Salary",
                                  "text-secondary": value === "Transport",
                                  "text-warning": value === "Food",
                                  "text-danger": value === "Payment",
                                  "font-medium": ["date", "category"].includes(
                                    columnKey as string
                                  ),
                                })}
                              >
                                {getKeyValue(item, columnKey)}
                              </span>
                            </div>
                          </TableCell>
                        );
                      }}
                    </TableRow>
                  )}
                </TableBody>
              </Table>
            </CardBody>
          </Card>
        </div>
      </main>
    </Fragment>
  );
}

export const getServerSideProps: GetServerSideProps = async (ctx) => {
  const session = await getServerAuthSession(ctx);

  if (!session?.user) {
    return {
      redirect: {
        destination: "/",
        permanent: false,
      },
    };
  }

  return {
    props: { session },
  };
};
